-- 删除现有表（按依赖顺序）
BEGIN
    FOR t IN (SELECT table_name FROM user_tables WHERE table_name IN (
        'ISSUE_HISTORY', 'REVIEW_COMMENTS', 'ISSUE_COMMENTS', 'REVIEW_ISSUES', 
        'ISSUES', 'ANALYSIS_RESULTS', 'CODE_COMMITS', 'ROLE_PERMISSIONS', 
        'PROJECT_ROLES', 'ROLE_MENUS', 'USER_ROLES', 'NOTIFICATIONS', 
        'MENUS', 'PERMISSIONS', 'PROJECTS', 'ROLES', 'USERS', 'PARAMETERS'
    )) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
    
    FOR s IN (SELECT sequence_name FROM user_sequences WHERE sequence_name IN (
        'USERS_SEQ', 'PERMISSIONS_SEQ', 'ROLES_SEQ', 'USER_ROLES_SEQ',
        'PROJECTS_SEQ', 'PROJECT_ROLES_SEQ', 'MENUS_SEQ', 'CODE_COMMITS_SEQ',
        'ISSUES_SEQ', 'ISSUE_COMMENTS_SEQ', 'ISSUE_HISTORY_SEQ', 
        'NOTIFICATIONS_SEQ', 'ANALYSIS_RESULTS_SEQ'
    )) LOOP
        EXECUTE IMMEDIATE 'DROP SEQUENCE ' || s.sequence_name;
    END LOOP;
END;
/

-- 创建序列
CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PERMISSIONS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ROLES_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE USER_ROLES_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PROJECTS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PROJECT_ROLES_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE MENUS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE CODE_COMMITS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ISSUES_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ISSUE_COMMENTS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ISSUE_HISTORY_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE NOTIFICATIONS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE ANALYSIS_RESULTS_SEQ START WITH 1 INCREMENT BY 1;

-- 用户表
CREATE TABLE USERS (
    ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL UNIQUE,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PHONE VARCHAR2(20),
    PASSWORD_HASH VARCHAR2(255) NOT NULL,
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT USERS_USERNAME_EMAIL_UNIQUE UNIQUE (USERNAME, EMAIL)
);

COMMENT ON TABLE USERS IS '用户表';

-- 用户ID自增触发器
CREATE OR REPLACE TRIGGER USERS_BI
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 用户更新触发器
CREATE OR REPLACE TRIGGER USERS_BU
BEFORE UPDATE ON USERS
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 权限表
CREATE TABLE PERMISSIONS (
    ID NUMBER PRIMARY KEY,
    CODE VARCHAR2(50) NOT NULL UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION CLOB,
    MODULE VARCHAR2(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE PERMISSIONS IS '权限表';

-- 权限ID自增触发器
CREATE OR REPLACE TRIGGER PERMISSIONS_BI
BEFORE INSERT ON PERMISSIONS
FOR EACH ROW
BEGIN
    SELECT PERMISSIONS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 角色表
CREATE TABLE ROLES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(50) NOT NULL,
    CODE VARCHAR2(50),
    DESCRIPTION CLOB,
    ROLE_TYPE VARCHAR2(20) DEFAULT 'user' NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uk_roles_name UNIQUE (NAME),
    CONSTRAINT uk_roles_code UNIQUE (CODE)
);

COMMENT ON TABLE ROLES IS '角色表';
COMMENT ON COLUMN ROLES.ID IS '角色ID';
COMMENT ON COLUMN ROLES.NAME IS '角色名称';
COMMENT ON COLUMN ROLES.CODE IS '角色代码';
COMMENT ON COLUMN ROLES.DESCRIPTION IS '角色描述';
COMMENT ON COLUMN ROLES.ROLE_TYPE IS '角色类型(user/project)';
COMMENT ON COLUMN ROLES.CREATED_AT IS '创建时间';
COMMENT ON COLUMN ROLES.UPDATED_AT IS '更新时间';

-- 创建索引
CREATE INDEX idx_roles_name ON ROLES(NAME);
CREATE INDEX idx_roles_code ON ROLES(CODE);

-- 角色ID自增触发器
CREATE OR REPLACE TRIGGER ROLES_BI
BEFORE INSERT ON ROLES
FOR EACH ROW
BEGIN
    SELECT ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 角色权限关联表
CREATE TABLE ROLE_PERMISSIONS (
    ROLE_ID NUMBER NOT NULL,
    PERMISSION_ID NUMBER NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    PRIMARY KEY (ROLE_ID, PERMISSION_ID)
);

COMMENT ON TABLE ROLE_PERMISSIONS IS '角色权限关联表';

-- 用户角色关联表
CREATE TABLE USER_ROLES (
    ID NUMBER PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ROLE_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    EXPIRES_AT TIMESTAMP,
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CONSTRAINT USER_ROLE_UNIQUE UNIQUE (USER_ID, ROLE_ID)
);

COMMENT ON TABLE USER_ROLES IS '用户角色关联表';

-- 用户角色ID自增触发器
CREATE OR REPLACE TRIGGER USER_ROLES_BI
BEFORE INSERT ON USER_ROLES
FOR EACH ROW
BEGIN
    SELECT USER_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- 项目表
CREATE TABLE PROJECTS (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    DESCRIPTION CLOB,
    REPOSITORY_URL VARCHAR2(500) NOT NULL,
    REPOSITORY_TYPE VARCHAR2(10) DEFAULT 'git',
    BRANCH VARCHAR2(100) DEFAULT 'main',
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CREATED_BY NUMBER,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE PROJECTS IS '项目表';

-- 项目ID自增触发器
CREATE OR REPLACE TRIGGER PROJECTS_BI
BEFORE INSERT ON PROJECTS
FOR EACH ROW
BEGIN
    SELECT PROJECTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 项目角色关联表
CREATE TABLE PROJECT_ROLES (
    ID NUMBER PRIMARY KEY,
    PROJECT_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    ROLE_ID NUMBER NOT NULL,
    JOINED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT PROJECT_USER_ROLE_UNIQUE UNIQUE (PROJECT_ID, USER_ID, ROLE_ID)
);

COMMENT ON TABLE PROJECT_ROLES IS '项目角色关联表';

-- 项目角色ID自增触发器
CREATE OR REPLACE TRIGGER PROJECT_ROLES_BI
BEFORE INSERT ON PROJECT_ROLES
FOR EACH ROW
BEGIN
    SELECT PROJECT_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 菜单表
CREATE TABLE MENUS (
    ID NUMBER PRIMARY KEY,
    TITLE VARCHAR2(255) NOT NULL,
    PATH VARCHAR2(255),
    ICON VARCHAR2(255),
    PARENT_ID NUMBER,
    ORDER_NUM NUMBER DEFAULT 0,
    PERMISSION_ID NUMBER,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE MENUS IS '菜单表';

-- 菜单ID自增触发器
CREATE OR REPLACE TRIGGER MENUS_BI
BEFORE INSERT ON MENUS
FOR EACH ROW
BEGIN
    SELECT MENUS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 角色菜单关联表
CREATE TABLE ROLE_MENUS (
    ROLE_ID NUMBER NOT NULL,
    MENU_ID NUMBER NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    PRIMARY KEY (ROLE_ID, MENU_ID)
);

COMMENT ON TABLE ROLE_MENUS IS '角色菜单关联表';

-- 参数表
CREATE TABLE PARAMETERS (
    PARAM_ID VARCHAR2(10) NOT NULL,
    PARAM_NAME VARCHAR2(10) NOT NULL,
    PARAM_TYPE VARCHAR2(10) NOT NULL,
    PRIMARY KEY (PARAM_ID, PARAM_TYPE)
);

COMMENT ON TABLE PARAMETERS IS '参数表';

-- 代码提交表
CREATE TABLE CODE_COMMITS (
    ID NUMBER PRIMARY KEY,
    COMMIT_ID VARCHAR2(50) NOT NULL UNIQUE,
    PROJECT_ID NUMBER NOT NULL,
    REPOSITORY VARCHAR2(255) NOT NULL,
    BRANCH VARCHAR2(100) NOT NULL,
    AUTHOR_ID NUMBER,
    COMMIT_MESSAGE CLOB NOT NULL,
    COMMIT_TIME TIMESTAMP NOT NULL,
    FILES_CHANGED NUMBER DEFAULT 0,
    INSERTIONS NUMBER DEFAULT 0,
    DELETIONS NUMBER DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

COMMENT ON TABLE CODE_COMMITS IS '代码提交记录表';

-- 代码提交ID自增触发器
CREATE OR REPLACE TRIGGER CODE_COMMITS_BI
BEFORE INSERT ON CODE_COMMITS
FOR EACH ROW
BEGIN
    SELECT CODE_COMMITS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- 问题表
CREATE TABLE ISSUES (
    ID NUMBER PRIMARY KEY,
    PROJECT_ID NUMBER NOT NULL,
    COMMIT_ID NUMBER,
    TITLE VARCHAR2(255) NOT NULL,
    DESCRIPTION CLOB,
    STATUS VARCHAR2(50) DEFAULT 'open' NOT NULL,
    PRIORITY VARCHAR2(50) DEFAULT 'medium' NOT NULL,
    ISSUE_TYPE VARCHAR2(50) DEFAULT 'bug' NOT NULL,
    SEVERITY VARCHAR2(20),
    CREATOR_ID NUMBER,
    ASSIGNEE_ID NUMBER,
    FILE_PATH VARCHAR2(255),
    LINE_START NUMBER,
    LINE_END NUMBER,
    RESOLUTION_TIME FLOAT,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    CLOSED_AT TIMESTAMP,
    RESOLVED_AT TIMESTAMP,
    CONSTRAINT CHECK_ISSUE_STATUS CHECK (STATUS IN ('open', 'in_progress', 'resolved', 'verified', 'closed', 'reopened', 'rejected')),
    CONSTRAINT CHECK_ISSUE_PRIORITY CHECK (PRIORITY IN ('low', 'medium', 'high', 'critical')),
    CONSTRAINT CHECK_ISSUE_TYPE CHECK (ISSUE_TYPE IN ('bug', 'feature', 'improvement', 'task', 'security', 'code_review')),
    CONSTRAINT CHECK_ISSUE_SEVERITY CHECK (SEVERITY IN ('low', 'medium', 'high', 'critical') OR SEVERITY IS NULL)
);

COMMENT ON TABLE ISSUES IS '问题跟踪表';

-- 问题ID自增触发器
CREATE OR REPLACE TRIGGER ISSUES_BI
BEFORE INSERT ON ISSUES
FOR EACH ROW
BEGIN
    SELECT ISSUES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 问题更新触发器
CREATE OR REPLACE TRIGGER ISSUES_BU
BEFORE UPDATE ON ISSUES
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 问题评论表
CREATE TABLE ISSUE_COMMENTS (
    ID NUMBER PRIMARY KEY,
    ISSUE_ID NUMBER NOT NULL,
    USER_ID NUMBER,
    CONTENT CLOB NOT NULL,
    FILE_PATH VARCHAR2(255),
    LINE_NUMBER NUMBER,
    IS_RESOLUTION NUMBER(1) DEFAULT 0,
    PARENT_ID NUMBER,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE ISSUE_COMMENTS IS '问题评论表';

-- 评论ID自增触发器
CREATE OR REPLACE TRIGGER ISSUE_COMMENTS_BI
BEFORE INSERT ON ISSUE_COMMENTS
FOR EACH ROW
BEGIN
    SELECT ISSUE_COMMENTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 评论更新触发器
CREATE OR REPLACE TRIGGER ISSUE_COMMENTS_BU
BEFORE UPDATE ON ISSUE_COMMENTS
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- 问题修改历史表
CREATE TABLE ISSUE_HISTORY (
    ID NUMBER PRIMARY KEY,
    ISSUE_ID NUMBER NOT NULL,
    USER_ID NUMBER,
    FIELD_NAME VARCHAR2(50) NOT NULL,
    OLD_VALUE CLOB,
    NEW_VALUE CLOB,
    CHANGED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE ISSUE_HISTORY IS '问题修改历史表';

-- 历史ID自增触发器
CREATE OR REPLACE TRIGGER ISSUE_HISTORY_BI
BEFORE INSERT ON ISSUE_HISTORY
FOR EACH ROW
BEGIN
    SELECT ISSUE_HISTORY_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- 通知表
CREATE TABLE NOTIFICATIONS (
    ID NUMBER PRIMARY KEY,
    RECIPIENT_ID NUMBER NOT NULL,
    ISSUE_ID NUMBER,
    TYPE VARCHAR2(50) NOT NULL,
    MESSAGE CLOB NOT NULL,
    IS_READ NUMBER(1) DEFAULT 0,
    READ_AT TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE NOTIFICATIONS IS '通知表';

-- 通知ID自增触发器
CREATE OR REPLACE TRIGGER NOTIFICATIONS_BI
BEFORE INSERT ON NOTIFICATIONS
FOR EACH ROW
BEGIN
    SELECT NOTIFICATIONS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- 代码分析结果表
CREATE TABLE ANALYSIS_RESULTS (
    ID NUMBER PRIMARY KEY,
    PROJECT_ID NUMBER NOT NULL,
    COMMIT_ID NUMBER,
    ANALYSIS_TYPE VARCHAR2(50) NOT NULL,
    RESULT_SUMMARY CLOB,
    DETAILS CLOB,
    CODE_QUALITY_SCORE FLOAT,
    COMPLEXITY_SCORE FLOAT,
    MAINTAINABILITY_SCORE FLOAT,
    SECURITY_SCORE FLOAT,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE ANALYSIS_RESULTS IS '代码分析结果表';

-- 分析结果ID自增触发器
CREATE OR REPLACE TRIGGER ANALYSIS_RESULTS_BI
BEFORE INSERT ON ANALYSIS_RESULTS
FOR EACH ROW
BEGIN
    SELECT ANALYSIS_RESULTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- 外键约束（可选添加）
-- ALTER TABLE USER_ROLES ADD CONSTRAINT FK_USER_ROLES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE;
-- ALTER TABLE USER_ROLES ADD CONSTRAINT FK_USER_ROLES_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE;
-- 其他表的外键约束类似

-- 初始化数据
-- 添加默认用户（admin/123456）
INSERT INTO USERS (USER_ID, USERNAME, EMAIL, PHONE, PASSWORD_HASH, IS_ACTIVE) 
VALUES ('admin', 'admin', 'admin@example.com', '13800138000', '$2b$12$sWSdI13BJ5ipPca/5CJUmuoGwdCI2zX36Hh1bi0vcd3jRVqkwOtYW', 1);

-- 初始化角色数据
INSERT INTO roles (id, name, code, description, role_type, created_at) VALUES
-- 用户角色
(1, 'admin', 'system_admin', '系统管理员，拥有所有权限', 'user', CURRENT_TIMESTAMP),
(2, 'ops', 'ops_admin', '运维管理员，负责系统运维', 'user', CURRENT_TIMESTAMP),
(3, 'project_manager', 'project_manager', '项目管理人员，管理多个项目', 'user', CURRENT_TIMESTAMP),
(4, 'user', 'normal_user', '普通用户，基本权限', 'user', CURRENT_TIMESTAMP),

-- 项目角色
(5, 'PM', 'project_admin', '项目经理，负责项目管理和协调', 'project', CURRENT_TIMESTAMP),
(6, 'SE', 'senior_developer', '高级开发工程师，负责架构设计和开发', 'project', CURRENT_TIMESTAMP),
(7, 'DEV', 'developer', '开发工程师，负责代码实现', 'project', CURRENT_TIMESTAMP),
(8, 'QA', 'quality_assurance', '测试工程师，负责测试和质量保证', 'project', CURRENT_TIMESTAMP);

-- 角色权限关联
INSERT INTO role_permissions (role_id, permission_id)
SELECT 1, id FROM permissions;

-- 运维管理员权限
INSERT INTO role_permissions (role_id, permission_id)
SELECT 2, id FROM permissions WHERE module IN ('系统管理', '用户管理', '角色管理');

-- 项目管理员权限
INSERT INTO role_permissions (role_id, permission_id)
SELECT 3, id FROM permissions WHERE module IN ('项目管理', '问题管理', '代码审核');

-- 普通用户权限
INSERT INTO role_permissions (role_id, permission_id)
SELECT 4, id FROM permissions WHERE code IN ('project:view', 'issue:view', 'review:view');

-- 添加基本权限
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('user:view', '查看用户', '查看用户列表和详情', '用户管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('user:create', '创建用户', '创建新用户', '用户管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('user:edit', '编辑用户', '编辑用户信息', '用户管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('user:delete', '删除用户', '删除用户', '用户管理');

INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('role:view', '查看角色', '查看角色列表和详情', '角色管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('role:create', '创建角色', '创建新角色', '角色管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('role:edit', '编辑角色', '编辑角色信息', '角色管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('role:delete', '删除角色', '删除角色', '角色管理');

INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('project:view', '查看项目', '查看项目列表和详情', '项目管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('project:create', '创建项目', '创建新项目', '项目管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('project:edit', '编辑项目', '编辑项目信息', '项目管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('project:delete', '删除项目', '删除项目', '项目管理');

INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('issue:view', '查看问题', '查看问题列表和详情', '问题管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('issue:create', '创建问题', '创建新问题', '问题管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('issue:edit', '编辑问题', '编辑问题信息', '问题管理');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('issue:delete', '删除问题', '删除问题', '问题管理');

INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('review:view', '查看代码审核', '查看代码审核列表和详情', '代码审核');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('review:create', '创建代码审核', '创建新代码审核', '代码审核');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('review:edit', '编辑代码审核', '编辑代码审核信息', '代码审核');
INSERT INTO PERMISSIONS (CODE, NAME, DESCRIPTION, MODULE) 
VALUES ('review:delete', '删除代码审核', '删除代码审核', '代码审核');

-- 为admin用户分配管理员角色
INSERT INTO USER_ROLES (USER_ID, ROLE_ID) VALUES (1, 1);

-- 添加系统参数
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('low', '低', 'priority');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('medium', '中', 'priority');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('high', '高', 'priority');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('critical', '严重', 'priority');

INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('open', '打开', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('in_progress', '进行中', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('resolved', '已解决', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('closed', '已关闭', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('reopened', '重新打开', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('rejected', '已拒绝', 'status');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('verified', '已验证', 'status');

INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('bug', '缺陷', 'issue_type');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('feature', '功能', 'issue_type');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('improvement', '改进', 'issue_type');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('task', '任务', 'issue_type');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('security', '安全问题', 'issue_type');
INSERT INTO PARAMETERS (PARAM_ID, PARAM_NAME, PARAM_TYPE) VALUES ('code_review', '代码审核', 'issue_type');

-- 添加基本菜单
INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('首页', '/dashboard', 'HomeOutlined', NULL, 1);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('系统管理', '/system', 'SettingOutlined', NULL, 2);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('用户管理', '/system/users', 'UserOutlined', 2, 1);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('角色管理', '/system/roles', 'TeamOutlined', 2, 2);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('权限管理', '/system/permissions', 'SafetyOutlined', 2, 3);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('项目管理', '/projects', 'ProjectOutlined', NULL, 3);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('问题管理', '/issues', 'BugOutlined', NULL, 4);

INSERT INTO MENUS (TITLE, PATH, ICON, PARENT_ID, ORDER_NUM) 
VALUES ('代码审核', '/reviews', 'CodeOutlined', NULL, 5);

-- 关联角色和菜单
INSERT INTO ROLE_MENUS (ROLE_ID, MENU_ID)
SELECT 1, ID FROM MENUS;

INSERT INTO ROLE_MENUS (ROLE_ID, MENU_ID)
SELECT 2, ID FROM MENUS WHERE TITLE NOT IN ('系统管理', '用户管理', '角色管理', '权限管理');

INSERT INTO ROLE_MENUS (ROLE_ID, MENU_ID)
SELECT 3, ID FROM MENUS WHERE TITLE IN ('首页', '项目管理', '问题管理', '代码审核');

INSERT INTO ROLE_MENUS (ROLE_ID, MENU_ID)
SELECT 4, ID FROM MENUS WHERE TITLE IN ('首页', '项目管理', '问题管理', '代码审核');

INSERT INTO ROLE_MENUS (ROLE_ID, MENU_ID)
SELECT 5, ID FROM MENUS WHERE TITLE IN ('首页', '项目管理', '问题管理');
